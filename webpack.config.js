const path = require('path')
const CircularDependencyPlugin = require('circular-dependency-plugin')
const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer')

const env = process.env.NODE_ENV || 'production'

const plugins = []
plugins.push(
  new CircularDependencyPlugin({
    // exclude detection of files based on a RegExp
    exclude: /node_modules/,
    // include specific files based on a RegExp
    include: /src/,
    // add errors to webpack instead of warnings
    failOnError: true,
    // allow import cycles that include an asyncronous import,
    // e.g. via import(/* webpackMode: "weak" */ './file.js')
    allowAsyncCycles: false,
    // set the current working directory for displaying module paths
    cwd: process.cwd(),
    // `onStart` is called before the cycle detection starts
    onStart({ compilation }) {
      console.log('start detecting webpack modules cycles')
    },
    // `onDetected` is called for each module that is cyclical
    onDetected({ module: webpackModuleRecord, paths, compilation }) {
      // `paths` will be an Array of the relative module paths that make up the cycle
      // `module` will be the module record generated by webpack that caused the cycle
      compilation.errors.push(new Error(paths.join(' -> ')))
    },
    // `onEnd` is called before the cycle detection ends
    onEnd({ compilation }) {
      console.log('end detecting webpack modules cycles')
    },
  }),
)
if (env !== 'production') {
  // plugins.push(new BundleAnalyzerPlugin())
}

module.exports = {
  // モード値を production に設定すると最適化された状態で、
  // development に設定するとソースマップ有効でJSファイルが出力される
  mode: env,
  entry: {
    bundle: './src/index.tsx',
  },
  output: {
    path: path.join(__dirname, 'public'),
    filename: '[name].js',
  },
  devtool: 'source-map',
  optimization: {
    splitChunks: {
      cacheGroups: {
        react: {
          test: /[\\/]node_modules[\\/](react|react-dom)[\\/]/,
          name: 'react.vendor',
          chunks: 'all',
        },
        firebase: {
          test: /[\\/]node_modules[\\/](@firebase|firebase)[\\/]/,
          name: 'firebase.vendor',
          chunks: 'all',
        },
        mui: {
          test: /[\\/]node_modules[\\/](@mui)[\\/]/,
          name: 'mui.vendor',
          chunks: 'all',
        },
      },
    },
  },
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        use: {
          loader: 'ts-loader',
        },
      },
      {
        test: /\.js[x]?$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: [
              [
                '@babel/preset-env', {
                  targets: {
                    node: 'current',
                  },
                }],
              '@babel/preset-react',
            ],
            plugins: ['@babel/plugin-syntax-jsx'],
          },
        },
      },
    ],
  },
  resolve: {
    extensions: ['', '.webpack.js', '.web.js', '.ts', '.tsx', '.js', '.jsx', '.json'],
  },
  plugins,
  devServer: {
    static: {
      directory: path.resolve(__dirname, 'public'),
    },
    historyApiFallback: true,
    host: '0.0.0.0',
  },
}
